[build]
  command = "npm run build"
  publish = "dist/client"
  functions = "netlify/functions"
  edge_functions = "netlify/edge-functions"

[build.environment]
  NODE_VERSION = "18"
  # INDEXNOW_KEY will be set in Netlify dashboard

[functions]
  directory = "netlify/functions"
  node_bundler = "esbuild"

# Prevent HTML caching to fix reload issues
[[headers]]
  for = "/index.html"
  [headers.values]
    Cache-Control = "public, max-age=0, no-cache, must-revalidate"

[[headers]]
  for = "/"
  [headers.values]
    Cache-Control = "public, max-age=0, no-cache, must-revalidate"

# JavaScript/TypeScript module MIME types
[[headers]]
  for = "*.js"
  [headers.values]
    Content-Type = "text/javascript; charset=utf-8"

[[headers]]
  for = "*.mjs"
  [headers.values]
    Content-Type = "text/javascript; charset=utf-8"

[[headers]]
  for = "*.tsx"
  [headers.values]
    Content-Type = "text/javascript; charset=utf-8"

[[headers]]
  for = "*.ts"
  [headers.values]
    Content-Type = "text/javascript; charset=utf-8"

[[headers]]
  for = "/*"
  [headers.values]
    # Force HTTPS and security headers
    Strict-Transport-Security = "max-age=31536000; includeSubDomains; preload"
    X-Content-Type-Options = "nosniff"
    X-Frame-Options = "DENY"
    X-XSS-Protection = "1; mode=block"
    Referrer-Policy = "strict-origin-when-cross-origin"
    # Content Security Policy will be sent dynamically by SSR as Report-Only with a nonce
    # Once violations are addressed, we can enforce here. Keep a permissive baseline for static files only.
    # Note: SSR adds Content-Security-Policy-Report-Only headers with per-request nonces.
    
    # Additional hardening headers
    Permissions-Policy = "geolocation=(), microphone=(), camera=(), usb=(), payment=()"
    Cross-Origin-Opener-Policy = "same-origin"
    Cross-Origin-Resource-Policy = "same-origin"

# Redirects moved to public/_redirects file for better dev compatibility

# CRITICAL: Exempt functions from SPA fallback - MUST come before /* catch-all
# Note: Using _redirects file instead as netlify.toml doesn't support /.netlify paths

# Force HTTPS redirect - production only
[[redirects]]
  from = "http://bibliokit.com/*"
  to = "https://bibliokit.com/:splat"
  status = 301
  force = true

[[redirects]]
  from = "http://www.bibliokit.com/*"
  to = "https://bibliokit.com/:splat"
  status = 301
  force = true

[[redirects]]
  from = "https://www.bibliokit.com/*"
  to = "https://bibliokit.com/:splat"
  status = 301
  force = true

# Exclude development files from SPA fallback - order matters!
[[redirects]]
  from = "/node_modules/.vite/deps/*.mjs"
  to = "/node_modules/.vite/deps/:splat"
  status = 200

[[redirects]]
  from = "/node_modules/.vite/deps/*.js"
  to = "/node_modules/.vite/deps/:splat"
  status = 200

[[redirects]]
  from = "/node_modules/*"
  to = "/node_modules/:splat"
  status = 200

[[redirects]]
  from = "/@vite/*"
  to = "/@vite/:splat"
  status = 200

[[redirects]]
  from = "/@react-refresh*"
  to = "/@react-refresh:splat"
  status = 200

[[redirects]]
  from = "/src/*.tsx"
  to = "/src/:splat"
  status = 200

[[redirects]]
  from = "/src/*.ts"
  to = "/src/:splat"
  status = 200

[[redirects]]
  from = "/src/*.jsx"
  to = "/src/:splat"
  status = 200

[[redirects]]
  from = "/src/*.js"
  to = "/src/:splat"
  status = 200

[[redirects]]
  from = "/src/*"
  to = "/src/:splat"
  status = 200

# SPA fallback for everything else (only when SSR fails)
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[dev]
  command = "npm run dev"
  port = 9989
  targetPort = 9990

# Edge Functions configuration - SSR handles all requests including bots
[[edge_functions]]
  function = "ssr"
  path = "/*"

# Disable bot-detection since SSR handles bots properly
# [[edge_functions]]
#   function = "bot-detection"
#   path = "/*" 